@page "/medicine-reminders"
@using RobotProject.Services;
@using RobotProject.Services.Repository;
@using RobotProject.Services.Models;
@using SimpleMqtt;
@inject IRobotRepository RobotRepository
@inject MqttMessageProcessingService MqttService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject SimpleMqttClient MqttClient
@rendermode InteractiveServer

<PageTitle>Reminders</PageTitle>

<MudDataGrid T="Reminder" Items="@_reminders" EditMode="DataGridEditMode.Form" Bordered="true" Dense="true"
    EditTrigger="DataGridEditTrigger.Manual" CommittedItemChanges="@SaveReminder" ReadOnly="false">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Reminders</MudText>
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Filled.AddCircleOutline" @onclick="AddReminder"></MudIconButton>
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="x => x.Type" Title="Type" Required="true" Editable="false" />
        <PropertyColumn Property="x => x.Name" Required="true" Title="Name" />
        <PropertyColumn Property="x => x.Description" Title="Description" Required="false"/>
        <PropertyColumn Property="x => x.Timestamp" Title="Timestamp">
            <EditTemplate>
                <MudStack Row="true">
                    <MudDatePicker Label="Date" Editable="true" @bind-Date="_editDate" Required="true"/>
                    <MudTimePicker Label="Time" Editable="true" @bind-Time="_editTime" Required="true"/>
                </MudStack>
            </EditTemplate>
        </PropertyColumn>

        <TemplateColumn CellClass="d-flex justify-end">
            <CellTemplate>
                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit"
                    OnClick="@(() => { context.Actions.StartEditingItemAsync(); InitTimestamp(context.Item.Timestamp); })" />
                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete"
                    OnClick="@(() => { DeleteItem(context.Item); })" />
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>


@code {
    DateTime? _editDate;
    TimeSpan? _editTime;
    List<Robot> _robots = [];
    Robot _selectedRobot = new(0, "null");
    List<Reminder> _reminders = new();

    private void MapDataToCombinedItems()
    {
        _reminders = _selectedRobot.Reminders;
    }

    private async Task SaveReminder(Reminder reminder)
    {
        if (_editDate == null) _editDate = reminder.Timestamp.Date;
        if (_editTime == null) _editTime = reminder.Timestamp.TimeOfDay;
        reminder.Timestamp = _editDate.Value + _editTime.Value;
        int id = _selectedRobot.Reminders.FindIndex(x => x.Id.Equals(reminder.Id));
        _selectedRobot.Reminders[id] = reminder;
        RobotRepository.UpdateRobot(_selectedRobot, "reminder");
        await Task.CompletedTask;
    }

    private async Task AddReminder()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters<AddReminderDialog> { { x => x.SelectedRobot, _selectedRobot } };
        var reference = await DialogService.ShowAsync<AddReminderDialog>("Add Reminder", parameters, options);
        var result = await reference.Result;
        if (result != null)
        {
            var data = result.Data;
            if (data != null) _selectedRobot.Reminders.Add((Reminder)data);
        }
        await InvokeAsync(() => StateHasChanged());
        await Task.CompletedTask;
        return;
    }

    private void DeleteItem(Reminder reminder)
    {
        _selectedRobot.Reminders.Remove(reminder);
        RobotRepository.RemoveReminder(reminder, _selectedRobot.Id);
        StateHasChanged();
    }

    private void InitTimestamp(DateTime timestamp)
    {
        _editDate = timestamp.Date;
        _editTime = timestamp.TimeOfDay;
    }

    //Handle Received mqtt messages
    public void HandleMessage(object? sender, SimpleMqttMessage args)
    {
        if (args.Topic == null || args.Message == null) return;
        if (args.Topic.Equals("robot/refresh-window") && args.Message.Equals(_selectedRobot.Id.ToString()))
        {
            RefreshBots();
            InvokeAsync(() => StateHasChanged());
        }
    }

    //Initialization
    protected override async Task OnInitializedAsync()
    {
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;

        MqttClient.OnMessageReceived -= HandleMessage;
        MqttClient.OnMessageReceived += HandleMessage;

        RefreshBots();

        MapDataToCombinedItems();


        await Task.CompletedTask;
    }

    public void RefreshBots()
    {
        _robots = RobotRepository.GetAllRobots();
        if (_robots.Count > 0)
        {
            _selectedRobot = _robots[0];
        }
    }
}